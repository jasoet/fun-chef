buildscript {
    ext {
        bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        bintrayApiKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        
        kotlinVersion = "1.3.10"
        coroutineVersion = "1.0.0"
        ktorVersion = "1.0.0"

        jUnitVersion = "5.3.1"

        spekVersion = "2.0.0-rc.1"
        kluentVersion = "1.4"
        mockKVersion = "1.8.13.kotlin13"

        logbackVersion = "1.2.3"

        experimentalFlags = [
                "-Xuse-experimental=kotlin.Experimental",
                "-Xuse-experimental=kotlin.ExperimentalMultiplatform",
                "-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer",
        ]
    }

    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id "org.jetbrains.kotlin.kapt" version "1.3.10"
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC8"
    id "com.jfrog.bintray" version "1.8.4"
}

group 'id.jasoet'

apply plugin: "jacoco"
apply plugin: "application"
apply plugin: "idea"
apply plugin: 'maven-publish'

mainClassName = "id.jasoet.funchef.Application"

repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

    compile "io.ktor:ktor-client-apache:$ktorVersion"
    compile "io.ktor:ktor-client-gson:$ktorVersion"

    compile "org.bouncycastle:bcpkix-jdk15on:1.60"
    compile "org.bouncycastle:bcprov-jdk15on:1.60"

    testCompile "org.jetbrains.kotlin:kotlin-test"

    testCompile "org.amshove.kluent:kluent:$kluentVersion"

    testImplementation "io.mockk:mockk:$mockKVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

detekt {
    version = "1.0.0.RC9.2"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$rootDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

test {
    finalizedBy detektCheck
    finalizedBy jacocoTestReport

    useJUnitPlatform {
        includeEngines 'spek2'
    }

    testLogging {
        exceptionFormat = "full"
        events "skipped", "failed"
    }
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
        allWarningsAsErrors = false

        freeCompilerArgs += experimentalFlags
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.3"
        languageVersion = "1.3"
        allWarningsAsErrors = false

        freeCompilerArgs += experimentalFlags
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        sourceDirs += file('build/generated/source/kapt/main')
        testSourceDirs += file('build/generated/source/kapt/test')

        sourceDirs += file('build/generated/source/kaptKotlin/main')
        testSourceDirs += file('build/generated/source/kaptKotlin/test')

        sourceDirs += file('build/tmp/kapt/main/kotlinGenerated')
        testSourceDirs += file('build/tmp/kapt/test/kotlinGeneratedst')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jasoet"
            name "Deny Prasetyo"
            email "jasoet87@gmail.com"
        }
    }

    scm {
        url "https://github.com/jasoet/ktor-client-chef"
    }
}

publishing {
    publications {
        KtorPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'id.jasoet'
            artifactId "${project.name}"
            version "${version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Ktor-client feature for Chef Client Authentication')
                root.appendNode('name', 'ktor-client-chef')
                root.appendNode('url', 'https://github.com/jasoet/ktor-client-chef')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = "${bintrayUser}"
    key = "${bintrayApiKey}"
    publications = ['KtorPublication']
    publish = true
    override = false

    pkg {
        name = "${project.name}"
        desc = "Ktor-client feature for Chef Client Authentication"
        repo = 'ktor'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/jasoet/ktor-client-chef'
        issueTrackerUrl = 'https://github.com/jasoet/ktor-client-chef/issues'
        labels = ['kotlin', 'ktor', 'feature']
        publicDownloadNumbers = true
        version {
            name = "${project.version}"
            vcsTag = "${project.version}"
            desc = "Ktor Client Chef version ${project.version}."
        }
    }
}

task compile(dependsOn: "testClasses")

wrapper {
    gradleVersion = '5.0'
}
